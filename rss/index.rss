<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Servers | Containers | Management</title><description>Servers | Containers | Management</description><link>http://localhost:2368/</link><generator>Ghost 0.11</generator><lastBuildDate>Tue, 15 Aug 2017 13:52:46 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>setting custom alerts on any device using pushbullet</title><description>&lt;p&gt;&lt;a href="http://localhost:2368/setting-custom-alerts-on-any-device-using-pushbullet/www.pushbullet.com"&gt;pushbullet.com&lt;/a&gt; lets you send API based notification/alerts.&lt;/p&gt;

&lt;p&gt;Start with creating a Pushbullet account. Install the app on your phone. Go to the pushbullet website, head to "My Account" and then create an access token. Note this token.&lt;/p&gt;

&lt;p&gt;The below python code can then be used to send a&lt;/p&gt;</description><link>http://localhost:2368/setting-custom-alerts-on-any-device-using-pushbullet/</link><guid isPermaLink="false">c518a189-609e-4936-ab67-2a8a632a14fb</guid><dc:creator>vvb</dc:creator><pubDate>Tue, 15 Aug 2017 13:51:05 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="http://localhost:2368/setting-custom-alerts-on-any-device-using-pushbullet/www.pushbullet.com"&gt;pushbullet.com&lt;/a&gt; lets you send API based notification/alerts.&lt;/p&gt;

&lt;p&gt;Start with creating a Pushbullet account. Install the app on your phone. Go to the pushbullet website, head to "My Account" and then create an access token. Note this token.&lt;/p&gt;

&lt;p&gt;The below python code can then be used to send a notification to all your registered devices.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def send_message(title, msg):  
    url = "https://api.pushbullet.com/v2/pushes"
    headers = {'Content-Type': 'application/json',
               "Access-Token": access_token}
    data = json.dumps({
        "type": "note",
        "title": title,
        "body": msg
    })
    requests.post(url, data=data, headers=headers)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My use case was &lt;a href="https://github.com/vvb/stock_alerts/blob/master/portfolio_alerts.py"&gt;this&lt;/a&gt; python script that generates buy and sell alerts on my mobile phone based on pre-configred prices in a csv sheet.&lt;/p&gt;

&lt;p&gt;But there is no reason this cannot be used to get datacenter alerts. I plan to include this as a library method in Cisco Ucs SDKs soon.&lt;/p&gt;

&lt;p&gt;note: You might need to signout and sign back in one time after you install the app for the alerts to start showing up.&lt;/p&gt;</content:encoded></item><item><title>Using http with pip</title><description>&lt;p&gt;Enforce using http with pip,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org &amp;lt;packageName&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/using-http-with-pip/</link><guid isPermaLink="false">7217758c-64c8-4fea-8c83-1fe62d32ec13</guid><category>ucspython</category><category>pip</category><dc:creator>vvb</dc:creator><pubDate>Mon, 17 Apr 2017 19:02:05 GMT</pubDate><content:encoded>&lt;p&gt;Enforce using http with pip,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org &amp;lt;packageName&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Reflection in go!</title><description>&lt;p&gt;Printing struct attributes and values using reflection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    "fmt"
    "reflect"
)

type User struct {  
    FirstName string
    LastName  string
    Age       int
}

func (f *User) reflect() {  
    v := reflect.ValueOf(f).Elem()

    for i := 0; i &amp;lt; v.NumField(); i++ {
        val := v.Field(i)
        t := v.Type().Field(i)
        fmt.Printf("%s&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/reflection-in-go/</link><guid isPermaLink="false">81c31105-1037-4f65-99a5-967a31797cb9</guid><category>golang</category><dc:creator>vvb</dc:creator><pubDate>Mon, 17 Apr 2017 18:54:19 GMT</pubDate><content:encoded>&lt;p&gt;Printing struct attributes and values using reflection.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (  
    "fmt"
    "reflect"
)

type User struct {  
    FirstName string
    LastName  string
    Age       int
}

func (f *User) reflect() {  
    v := reflect.ValueOf(f).Elem()

    for i := 0; i &amp;lt; v.NumField(); i++ {
        val := v.Field(i)
        t := v.Type().Field(i)
        fmt.Printf("%s %v \t", t.Name, val.Interface())
    }
}

func main() {  
    f := &amp;amp;User{
        FirstName: "John",
        LastName:  "Doe",
        Age:       13,
    }

    f.reflect()
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>ansible modules for Cisco UCS IMC server</title><description>&lt;h3 id="imcansible"&gt;imc-ansible&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;imc-ansible&lt;/code&gt; are a set of ansible modules for Cisco UCS standalone servers(IMC servers). &lt;/p&gt;

&lt;h4 id="installation"&gt;installation&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Install ansible
sudo pip install ansible

# install imcsdk from github
git clone https://github.com/ciscoucs/imcsdk  
cd imcsdk  
sudo make install

# install imc-ansible from github
git clone https://github.com/ciscoucs/imc-ansible  
cd&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/ansible-modules-for-cisco-ucs-imc-server/</link><guid isPermaLink="false">53748709-f767-4c0b-b82b-d0e027b4f4be</guid><category>ansible</category><category>imcsdk</category><dc:creator>vvb</dc:creator><pubDate>Mon, 06 Feb 2017 22:55:04 GMT</pubDate><content:encoded>&lt;h3 id="imcansible"&gt;imc-ansible&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;imc-ansible&lt;/code&gt; are a set of ansible modules for Cisco UCS standalone servers(IMC servers). &lt;/p&gt;

&lt;h4 id="installation"&gt;installation&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;# Install ansible
sudo pip install ansible

# install imcsdk from github
git clone https://github.com/ciscoucs/imcsdk  
cd imcsdk  
sudo make install

# install imc-ansible from github
git clone https://github.com/ciscoucs/imc-ansible  
cd imc-ansible  
sudo python install.py  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="samplerun"&gt;sample run&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;âž” ansible-playbook -i inventory site.yml

PLAY [imc]  
*********************************************************************

TASK [common : check if imcsdk is installed]  
***********************************
ok: [fpmr1_192.168.1.1]

TASK [common : install imcsdk]  
*************************************************
skipping: [fpmr1_192.168.1.1]

TASK [admin : set password policy]  
*********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : create local user]  
***********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : delete local user]  
***********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : reset password policy]  
*******************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : enable ntp]  
******************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : disable ntp]  
*****************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : enable LDAP]  
*****************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : disable LDAP]  
****************************************************
changed: [fpmr1_192.168.1.1]

TASK [boot : set boot order]  
***************************************************
changed: [fpmr1_192.168.1.1]

TASK [boot : set boot order alternate]  
*****************************************
changed: [fpmr1_192.168.1.1]

TASK [storage : create virtual drive]  
******************************************
changed: [fpmr1_192.168.1.1]

TASK [storage : delete virtual drive]  
******************************************
changed: [fpmr1_192.168.1.1]

PLAY RECAP  
*********************************************************************
fpmr1_192.168.1.1       : ok=13   changed=12   unreachable=0    failed=0  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Inventory Ucs Managed servers via ucsmsdk</title><description>&lt;p&gt;ucsmsdk 0.9.3.0 will add support for inventory APIs. &lt;br&gt;
This allows for multi-host multi-component inventory in multiple formats(enough of multiple? :-D ).&lt;/p&gt;

&lt;p&gt;The inventory APIs support inventorying,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- fabric interconnects
- cpus
- disks
- dimms
- storage controller
- VIC
- vNICs
- vHBAs
- PSUs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The&lt;/p&gt;</description><link>http://localhost:2368/inventory-ucs-managed-servers-via-ucsmsdk/</link><guid isPermaLink="false">017cc972-97b5-4343-a39e-9f777602a504</guid><category>ucspython</category><category>ucsmsdk</category><dc:creator>vvb</dc:creator><pubDate>Tue, 24 Jan 2017 06:04:13 GMT</pubDate><content:encoded>&lt;p&gt;ucsmsdk 0.9.3.0 will add support for inventory APIs. &lt;br&gt;
This allows for multi-host multi-component inventory in multiple formats(enough of multiple? :-D ).&lt;/p&gt;

&lt;p&gt;The inventory APIs support inventorying,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- fabric interconnects
- cpus
- disks
- dimms
- storage controller
- VIC
- vNICs
- vHBAs
- PSUs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The supported output formats for the report are,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- csv
- html
- json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;we recommend using the html format, as it has inbuilt javascript based filtering. It can quickly help narrow down a certain component on a certain host.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from ucsmsdk.utils.inventory import get_inventory

# Gets inventory of all components in JSON format
get_inventory(handle=handle)

# Gets inventory for all servers all components in JSON format
get_inventory(handle=[handle1, handle2, handle3])

# Gets inventory of one server all components in JSON format
get_inventory(handle=handle, component="all")

# Gets disks inventory of one server in JSON format
get_inventory(handle=handle, component="disks")

# Gets cpu and disks inventory for one server in JSON format
get_inventory(handle=handle, component=["cpu", "disks"])

# Gets cpu and disks inventory for one server in JSON format and writes to inventory.json file
get_inventory(handle=handle, component=["cpu", "disks"], file_format="json", file_name="inventory.json")

# Gets cpu and disks inventory for one server in CSV format and writes to inventory.csv fie
get_inventory(handle=handle, component=["cpu", "disks"], file_format="csv", file_name="inventory.csv")

# Gets cpu and disks inventory for one server in HTML format and writes to inventory.html
get_inventory(handle=handle, component=["cpu", "disks"], file_format="html", file_name="inventory.html")  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be tried out today via the code available at &lt;a href="https://github.com/ciscoucs/ucsmsdk"&gt;https://github.com/ciscoucs/ucsmsdk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;complete code to run it,  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /usr/bin/env python

from ucsmsdk.ucshandle import UcsHandle  
from ucsmsdk.utils.inventory import get_inventory

handle = UcsHandle("192.168.1.1", "username", "password")  
handle.login()

# This would create inventory.html in the same directory where the script is run from
get_inventory(handle=handle, component="all", file_format="html", file_name="inventory.html")

handle.logout()  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>debugging in an ansible environment</title><description>&lt;p&gt;I was looking for a PDB sort of debugger for debugging custom ansible modules written in Python. This is when i bumped into &lt;a href="http://michaeldehaan.net/post/35403909347/tips-on-using-debuggers-with-ansible"&gt;this&lt;/a&gt; blog.&lt;/p&gt;

&lt;p&gt;As recommended on the blog, I tried out &lt;code&gt;epdb&lt;/code&gt; and it works great for debugging custom ansible modules written in python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install epdb&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/debugging-in-an-ansible-environment/</link><guid isPermaLink="false">265e74b7-1b71-4d1b-a51c-65520d6f6deb</guid><category>ansible</category><dc:creator>vvb</dc:creator><pubDate>Tue, 10 Jan 2017 20:18:27 GMT</pubDate><content:encoded>&lt;p&gt;I was looking for a PDB sort of debugger for debugging custom ansible modules written in Python. This is when i bumped into &lt;a href="http://michaeldehaan.net/post/35403909347/tips-on-using-debuggers-with-ansible"&gt;this&lt;/a&gt; blog.&lt;/p&gt;

&lt;p&gt;As recommended on the blog, I tried out &lt;code&gt;epdb&lt;/code&gt; and it works great for debugging custom ansible modules written in python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install epdb  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;epdb: &lt;a href="https://pypi.python.org/pypi/epdb"&gt;https://pypi.python.org/pypi/epdb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;Insert the below code works as a breakpoint. Insert this at the lines needing debug.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import epdb  
epdb.serve()  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run ansible with &lt;code&gt;--forks 1&lt;/code&gt; option to avoid parallel threads&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook -i inventory site.yml --forks 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This run should hang when it hits the piece of code that has &lt;code&gt;epdb.serve()&lt;/code&gt;. At this point run the below from another shell&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;python -c "import epdb; epdb.connect()"  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should get you to the &lt;code&gt;epdb&lt;/code&gt; shell. &lt;br&gt;
here on, things should look familiar to &lt;code&gt;pdb&lt;/code&gt;.&lt;/p&gt;</content:encoded></item><item><title>imcsdk storage APIs</title><description>&lt;p&gt;0.9.2.0 release of imcsdk will add support for &lt;code&gt;imcsdk.apis.server.storage&lt;/code&gt; to manage virtual drives.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtual_drive_create&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virtual_drive_delete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic usage,  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vd = virtual_drive_create(handle=handle,  
                          drive_group=[[1]],
                          controller_slot="MEZZ",
                          raid_level=0)
virtual_drive_delete(handle=handle,  
                     controller_slot="MEZZ"&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/imcsdk-storage-apis/</link><guid isPermaLink="false">9031319e-31c8-44d7-a324-775ceda5c4a8</guid><category>imcsdk</category><category>ucspython</category><dc:creator>vvb</dc:creator><pubDate>Sat, 07 Jan 2017 19:04:54 GMT</pubDate><content:encoded>&lt;p&gt;0.9.2.0 release of imcsdk will add support for &lt;code&gt;imcsdk.apis.server.storage&lt;/code&gt; to manage virtual drives.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtual_drive_create&lt;/code&gt; &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;virtual_drive_delete&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basic usage,  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vd = virtual_drive_create(handle=handle,  
                          drive_group=[[1]],
                          controller_slot="MEZZ",
                          raid_level=0)
virtual_drive_delete(handle=handle,  
                     controller_slot="MEZZ",
                     name=vd.virtual_drive_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Somethings to note about the arguments that &lt;code&gt;virtual_drive_create&lt;/code&gt; takes,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;drive_group&lt;/code&gt; needs to be array of an array(s) - &lt;code&gt;[[]]&lt;/code&gt;
The below shows sample inputs for &lt;code&gt;drive_group&lt;/code&gt;,  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;        For Raid 0  - [[1, 2, 3]]
        For Raid 10 - [[1, 2], [3, 4], [5, 6]]
        For Raid 50 - [[1, 2, 3], [4, 5, 6]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where the numbers are physical drive slots.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;controller_slot&lt;/code&gt; is the name/id of the Storage controller. 
This could be &lt;code&gt;MEZZ&lt;/code&gt; in some cases. or could be a number &lt;code&gt;0-9&lt;/code&gt; is some.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;raid_level&lt;/code&gt; - refer to the raid levels supported by the platform&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title>Inventorying IMC servers via imcsdk</title><description>&lt;p&gt;The &lt;code&gt;0.9.2.0&lt;/code&gt; release of &lt;code&gt;imcsdk&lt;/code&gt; will add support for &lt;code&gt;inventory&lt;/code&gt; APIs. &lt;/p&gt;

&lt;p&gt;The following output formats are supported -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON (default)&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refer the API documentation for a list of components that can be inventoried. &lt;code&gt;all&lt;/code&gt; fetches inventory for all components.&lt;/p&gt;

&lt;p&gt;Usage is shown below,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from imcsdk.&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/inventorying-imc-servers-via-imcsdk/</link><guid isPermaLink="false">8262e689-c3a1-49c9-b6ca-b0e1b703f4d1</guid><category>ucspython</category><category>imcsdk</category><dc:creator>vvb</dc:creator><pubDate>Tue, 03 Jan 2017 06:41:48 GMT</pubDate><content:encoded>&lt;p&gt;The &lt;code&gt;0.9.2.0&lt;/code&gt; release of &lt;code&gt;imcsdk&lt;/code&gt; will add support for &lt;code&gt;inventory&lt;/code&gt; APIs. &lt;/p&gt;

&lt;p&gt;The following output formats are supported -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JSON (default)&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSV&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refer the API documentation for a list of components that can be inventoried. &lt;code&gt;all&lt;/code&gt; fetches inventory for all components.&lt;/p&gt;

&lt;p&gt;Usage is shown below,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from imcsdk.apis.server.inventory import get_inventory

# Gets inventory of all components in JSON format
get_inventory(handle=handle)

# Gets inventory for all servers all components in JSON format
get_inventory(handle=[handle1, handle2, handle3])

# Gets inventory of one server all components in JSON format
get_inventory(handle=handle, component="all")

# Gets disks inventory of one server in JSON format
get_inventory(handle=handle, component="disks")

# Gets cpu and disks inventory for one server in JSON format
get_inventory(handle=handle, component=["cpu", "disks"])

# Gets cpu and disks inventory for one server in JSON format and writes to inventory.json file
get_inventory(handle=handle, component=["cpu", "disks"], file_format="json", file_name="inventory.json")

# Gets cpu and disks inventory for one server in CSV format and writes to inventory.csv fie
get_inventory(handle=handle, component=["cpu", "disks"], file_format="csv", file_name="inventory.csv")

# Gets cpu and disks inventory for one server in HTML format and writes to inventory.html
get_inventory(handle=handle, component=["cpu", "disks"], file_format="html", file_name="inventory.html")  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>html table search with pure javascript</title><description>&lt;p&gt;The below javascript method searches through all the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; elements and hides &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; that do not have it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function search() {
    // Declare variables
    var input, filter, table, tr, td, i, j, tds, ths, matched;
    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    tr = document.getElementsByTagName("tr");

    // Loop&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/html-table-search-with-pure-javascript/</link><guid isPermaLink="false">f4922a20-0954-4e6e-a0ca-493230cf8fc0</guid><category>javascript</category><dc:creator>vvb</dc:creator><pubDate>Thu, 22 Dec 2016 17:55:35 GMT</pubDate><content:encoded>&lt;p&gt;The below javascript method searches through all the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; elements and hides &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; that do not have it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    function search() {
    // Declare variables
    var input, filter, table, tr, td, i, j, tds, ths, matched;
    input = document.getElementById("searchInput");
    filter = input.value.toUpperCase();
    tr = document.getElementsByTagName("tr");

    // Loop through all table rows, and hide
    // those who don't match the search query
    for (i = 0; i &amp;lt; tr.length; i++) {
        tds = tr[i].getElementsByTagName("td");
        ths = tr[i].getElementsByTagName("th");
        matched = false;

        // leave the row header 
        if (ths.length &amp;gt; 0) {
            matched = true;
        }
        else {
            for (j = 0; j &amp;lt; tds.length; j++) {
                td = tds[j];
                if (td.innerHTML.toUpperCase().indexOf(filter) &amp;gt; -1) {
                    matched = true;
                    break;
                }

            }
        }
        if (matched == true) {
            tr[i].style.display = "";
        }
        else {
            tr[i].style.display = "none";
        }
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the below adds the search input box to the webpage and maps it to our &lt;code&gt;search&lt;/code&gt; method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;input type="text" id="searchInput" onkeyup="search()" placeholder="Search.."&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>configuring a secure front-end for a non-secure service</title><description>&lt;p&gt;The goal is to enable &lt;code&gt;https&lt;/code&gt; only access for a pre-existing &lt;code&gt;http&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Let us assume that a service is running on &lt;code&gt;http://myserver.com:8000/service&lt;/code&gt;. The goal is to make no changes to the pre-existing service and still allow &lt;code&gt;https&lt;/code&gt; only access to it.&lt;/p&gt;

&lt;p&gt;One way this can&lt;/p&gt;</description><link>http://localhost:2368/configuring-a-secure-front-end-for-a-non-secure-service/</link><guid isPermaLink="false">90ab218f-6208-452b-91f6-be39f893d871</guid><category>apache</category><dc:creator>vvb</dc:creator><pubDate>Tue, 06 Dec 2016 12:24:01 GMT</pubDate><content:encoded>&lt;p&gt;The goal is to enable &lt;code&gt;https&lt;/code&gt; only access for a pre-existing &lt;code&gt;http&lt;/code&gt; service.&lt;/p&gt;

&lt;p&gt;Let us assume that a service is running on &lt;code&gt;http://myserver.com:8000/service&lt;/code&gt;. The goal is to make no changes to the pre-existing service and still allow &lt;code&gt;https&lt;/code&gt; only access to it.&lt;/p&gt;

&lt;p&gt;One way this can be accomplished, is using apache redirects. We are going to use &lt;code&gt;ProxyPass&lt;/code&gt; and &lt;code&gt;ProxyPassReverse&lt;/code&gt; directives.&lt;/p&gt;

&lt;p&gt;Add the following to &lt;code&gt;httpd.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost myserver.com:443&amp;gt;

# set the SSL options


# Enable ProxyPass
SSLProxyEngine On  
RewriteEngine On  
#ProxyPreserveHost On        #Important to comment this
ProxyPass /service http://myserver.com:8000/service/ nocanon  
ProxyPassReverse /service http://myserver.com:8000/service/

&amp;lt;/VirtualHost&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above would expose &lt;code&gt;https://myserver.com/service&lt;/code&gt; and internally redirect it to &lt;code&gt;http://myserver.com:8000/service&lt;/code&gt;. The &lt;code&gt;ProxyPass&lt;/code&gt; directive does that. &lt;code&gt;ProxyPassReverse&lt;/code&gt; makes sure that what is sent back to the browser is again converted back to &lt;code&gt;https://msyserver.com/service&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;Now, &lt;code&gt;https&lt;/code&gt; access should be working. But we still need to disable the &lt;code&gt;http&lt;/code&gt; access. The below allows all access between internal services (&lt;code&gt;https&lt;/code&gt; to &lt;code&gt;http&lt;/code&gt; in this case), but disables access to port &lt;code&gt;8000&lt;/code&gt; from outside.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo /sbin/iptables -A INPUT -p tcp -i lo -j ACCEPT  
sudo /sbin/iptables -A INPUT -p tcp --dport 8000 -j DROP  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done!&lt;/p&gt;</content:encoded></item><item><title>ansible - pretty printing errors</title><description>&lt;p&gt;Ansible does not do a great job at pretty printing exceptions/errors. There are plugins available that make this easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/ansible/plugins/callback  
cd ~/ansible/plugins/callback  
wget https://raw.githubusercontent.com/marcosdiez/ansible_human_log.py/master/human_log.py  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create/edit &lt;code&gt;~/.ansible.cfg&lt;/code&gt; and add the&lt;/p&gt;</description><link>http://localhost:2368/ansible-pretty-printing-errors/</link><guid isPermaLink="false">fd95c5bb-4ed0-4c39-899b-6bb2c8cdaa30</guid><category>ansible</category><dc:creator>vvb</dc:creator><pubDate>Mon, 05 Dec 2016 04:25:34 GMT</pubDate><content:encoded>&lt;p&gt;Ansible does not do a great job at pretty printing exceptions/errors. There are plugins available that make this easy.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/ansible/plugins/callback  
cd ~/ansible/plugins/callback  
wget https://raw.githubusercontent.com/marcosdiez/ansible_human_log.py/master/human_log.py  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;create/edit &lt;code&gt;~/.ansible.cfg&lt;/code&gt; and add the following to the &lt;code&gt;defaults&lt;/code&gt; section,  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[defaults]
callback_plugins = ~/ansible_plugins/callback  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Done!&lt;/p&gt;</content:encoded></item><item><title>Using Yum on RHEL without RHN subscription</title><description>&lt;p&gt;Disable the rhn yum plugin, &lt;code&gt;/etc/yum/pluginconf.d/rhnplugin.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[main]
enabled = 0  
gpgcheck = 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the epel-repo for the version of redhat you have,&lt;/p&gt;

&lt;p&gt;RHEL 5.x  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm  
sudo rpm -Uvh epel-release-5*.rpm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RHEL 6.x  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://dl.&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/using-yum-on-rhel-without-rhn-subscription/</link><guid isPermaLink="false">01d29217-e20d-4ec3-ae0c-0acf7d9f91db</guid><dc:creator>vvb</dc:creator><pubDate>Tue, 29 Nov 2016 05:13:00 GMT</pubDate><content:encoded>&lt;p&gt;Disable the rhn yum plugin, &lt;code&gt;/etc/yum/pluginconf.d/rhnplugin.conf&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[main]
enabled = 0  
gpgcheck = 1  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Install the epel-repo for the version of redhat you have,&lt;/p&gt;

&lt;p&gt;RHEL 5.x  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm  
sudo rpm -Uvh epel-release-5*.rpm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RHEL 6.x  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm  
sudo rpm -Uvh epel-release-6*.rpm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RHEL 7.x  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm  
sudo rpm -Uvh epel-release-latest-7*.rpm  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, you can start using yum, with the install epel repos,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum update  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Running multiple versions of python</title><description>&lt;p&gt;You can generally run multiple version of Python minor release 2.7 vs 2.6. These are symlinks created in /usr/bin/. &lt;/p&gt;

&lt;p&gt;But how do you go about running multiple versions of the the same minor release - 2.7.9 vs 2.7.10.&lt;/p&gt;

&lt;p&gt;I wrote a small script&lt;/p&gt;</description><link>http://localhost:2368/running-multiple-versions-of-python/</link><guid isPermaLink="false">56cfa77e-6fb8-4bcd-b05b-2754f21513b4</guid><category>ucspython</category><dc:creator>vvb</dc:creator><pubDate>Wed, 23 Nov 2016 17:45:55 GMT</pubDate><content:encoded>&lt;p&gt;You can generally run multiple version of Python minor release 2.7 vs 2.6. These are symlinks created in /usr/bin/. &lt;/p&gt;

&lt;p&gt;But how do you go about running multiple versions of the the same minor release - 2.7.9 vs 2.7.10.&lt;/p&gt;

&lt;p&gt;I wrote a small script that downloads, builds python from source and installs it in a path of its own. &lt;/p&gt;

&lt;p&gt;The below is to be run with the required version, for e.g.&lt;code&gt;2.7.9&lt;/code&gt;. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
version=$1  
mkdir ~/python  
wget http://www.python.org/ftp/python/$version/Python-$version.tgz  
tar -zxvf Python-$version.tgz  
cd Python-$version  
mkdir ~/.localpython-$version  
./configure --prefix=$HOME/.localpython-$version
make  
make install  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can then be used from ~/.localpython-2.7.9/bin/python.&lt;/p&gt;

&lt;p&gt;we can now set up a virtual environment specifically for each version of python we have installed.&lt;/p&gt;

&lt;p&gt;Install virtualenv&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install virtualenv  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the following to &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt;,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source /usr/local/bin/virtualenvwrapper.sh  
export WORKON_HOME="$HOME/virtual_env/"  
export PIP_VIRTUALENV_BASE=$WORKON_HOME  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now you can create a new environment using the below command. The &lt;code&gt;-p&lt;/code&gt; option specifies the python version to use for this environment. &lt;code&gt;--no-site-packages&lt;/code&gt; will restrict this environment from using the python libraries from the global environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkvirtualenv --no-site-packages -p ~/.localpython-2.7.9/bin/python python279  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here on, we call switch to this new environment using the below,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workon python279  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Can get out this environment by using&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deactivate  
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title>Python and state of SSL/TLS</title><description>&lt;p&gt;Python 2.7.9 introduces a &lt;code&gt;ssl.SSLContext&lt;/code&gt; object to make selecting SSL version easier.&lt;/p&gt;

&lt;p&gt;Since using SSLv2 or SSLv3 is a crime, most systems rely on TLSv1, TLSv1.1 or TLSv1.2. The SSLContext obect makes it easier to define the generic subset of protocol one desires and then&lt;/p&gt;</description><link>http://localhost:2368/python-and-state-of-ssl-tls/</link><guid isPermaLink="false">2d44fda1-fd55-4c61-a564-997611a5cefc</guid><category>ucspython</category><category>ucsmsdk</category><dc:creator>vvb</dc:creator><pubDate>Wed, 23 Nov 2016 15:37:47 GMT</pubDate><content:encoded>&lt;p&gt;Python 2.7.9 introduces a &lt;code&gt;ssl.SSLContext&lt;/code&gt; object to make selecting SSL version easier.&lt;/p&gt;

&lt;p&gt;Since using SSLv2 or SSLv3 is a crime, most systems rely on TLSv1, TLSv1.1 or TLSv1.2. The SSLContext obect makes it easier to define the generic subset of protocol one desires and then individually turnoff some of them.&lt;/p&gt;

&lt;p&gt;The below code relies only on TLSv1, TLSv1.1, TLSv1.2 and not use SSLv2 or SSLv3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssl_context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)  
ssl_context.options |= ssl.OP_NO_SSLv2  
ssl_context.options |= ssl.OP_NO_SSLv3  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, How can this be used in the larger context. &lt;br&gt;
We use &lt;code&gt;urllib2&lt;/code&gt; and so the above needs to fit into one of the handlers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;opener = urllib2.build_opener(TLSHandler)  
response = opener.open(url)

class TLSHandler(urllib2.HTTPSHandler):  
    """Like HTTPSHandler but more specific"""                                   

    def __init__(self):                                                         
    Â¦   urllib2.HTTPSHandler.__init__(self)                                     

    def https_open(self, req):                                                  
    Â¦   return self.do_open(TLSConnection, req) 

class TLSConnection(httplib.HTTPSConnection):  
    """Like HTTPSConnection but more specific"""                                

    def __init__(self, host, **kwargs):                                         
    Â¦   httplib.HTTPSConnection.__init__(self, host, **kwargs)                  

    def connect(self):                                                          
    Â¦   """Overrides HTTPSConnection.connect to specify TLS version"""          
    Â¦   # Standard implementation from HTTPSConnection, which is not            
    Â¦   # designed for extension, unfortunately                                 
    Â¦   sock = socket.create_connection((self.host, self.port),             
    Â¦   Â¦   Â¦   self.timeout, self.source_address)  

    Â¦   if getattr(self, '_tunnel_host', None):                                 
    Â¦   Â¦   self.sock = sock                                                    
    Â¦   Â¦   self._tunnel()                                                      

    Â¦   # Since python 2.7.9, tls 1.1 and 1.2 are supported via 
    Â¦   # SSLContext                                                        
    Â¦   ssl_context = ssl.SSLContext(ssl.PROTOCOL_SSLv23)                   
    Â¦   ssl_context.options |= ssl.OP_NO_SSLv2                              
    Â¦   ssl_context.options |= ssl.OP_NO_SSLv3                              
    Â¦   ssl_context.load_cert_chain(keyfile, certfile)            
    Â¦   self.sock = ssl_context.wrap_socket(sock)  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This would produce a &lt;code&gt;SSL_UNSUPPORTED_VERSION&lt;/code&gt; error when the server does not support TLSv1/1.1/1.2&lt;/p&gt;

&lt;p&gt;note: TLSv1.1 and TLSv1.2 are supported only since Openssl version 1.0.1. And so, you might have Python &gt;= 2.7.9 and still not see &lt;code&gt;PROTOCOL_TLSv1_1&lt;/code&gt; and &lt;code&gt;PROTOCOL_TLSv1_2&lt;/code&gt; unless the openssl version is correct.&lt;/p&gt;

&lt;p&gt;TLS 1.2 handshake fails in some clients, because of a TLV length padding issue. In such cases, we should fallback to TLSv1.&lt;/p&gt;</content:encoded></item><item><title>Python and Ctags</title><description>&lt;p&gt;You want to jump to definition of a method, but ctags keep taking you to the import line of that method?&lt;/p&gt;

&lt;p&gt;add the following to ~/.ctags&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--python-kinds=-i
&lt;/code&gt;&lt;/pre&gt;</description><link>http://localhost:2368/python-and-ctags/</link><guid isPermaLink="false">cf40fe70-bc98-4dd9-8c69-1ab17f7456ff</guid><category>ucspython</category><dc:creator>vvb</dc:creator><pubDate>Mon, 07 Nov 2016 23:30:58 GMT</pubDate><content:encoded>&lt;p&gt;You want to jump to definition of a method, but ctags keep taking you to the import line of that method?&lt;/p&gt;

&lt;p&gt;add the following to ~/.ctags&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--python-kinds=-i
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item></channel></rss>