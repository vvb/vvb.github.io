<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Vikrant Balyan - Software and stuff..</title><description>Vikrant Balyan - Software and stuff..</description><link>http://blog.vijayvikrant.com/</link><image><url>http://blog.vijayvikrant.com/favicon.png</url><title>Vikrant Balyan - Software and stuff..</title><link>http://blog.vijayvikrant.com/</link></image><generator>Ghost 2.6</generator><lastBuildDate>Wed, 02 Jan 2019 17:25:46 GMT</lastBuildDate><atom:link href="http://blog.vijayvikrant.com/author/vvb/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Notes from Deep Work by Cal Newport</title><description>&lt;p&gt;My notes from reading &lt;a href="https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692"&gt;"Deep Work by Cal Newport"&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This book emphasizes on sound proofing yourself from the world in order to be able to do deep work. For the less extreme, it advocates taking out some quality time for working on things that matter the most in your work&lt;/p&gt;</description><link>http://blog.vijayvikrant.com/notes-from-deep-work-by-cal-newport/</link><guid isPermaLink="false">5c2ceb09a39758726ba5ec34</guid><dc:creator>Vikrant Balyan</dc:creator><pubDate>Wed, 02 Jan 2019 16:47:29 GMT</pubDate><content:encoded>&lt;p&gt;My notes from reading &lt;a href="https://www.amazon.com/Deep-Work-Focused-Success-Distracted/dp/1455586692"&gt;"Deep Work by Cal Newport"&lt;/a&gt;&lt;/p&gt;&lt;p&gt;This book emphasizes on sound proofing yourself from the world in order to be able to do deep work. For the less extreme, it advocates taking out some quality time for working on things that matter the most in your work life. Spend less time on regular recurring non-productive things. &lt;/p&gt;&lt;p&gt;Below is the gist of things that I want to remember from the book,&lt;/p&gt;&lt;h3 id="4dx-4-disciplines-of-execution-framework"&gt;4DX (4 Disciplines of Execution) Framework&lt;/h3&gt;&lt;p&gt;&lt;strong&gt; Focus on the wildly important &lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;The more you try to do, the lesser you will accomplish.&lt;/li&gt;
&lt;li&gt;Execute small number of super important goals.&lt;/li&gt;
&lt;li&gt;Let the goals produce ambitious outcomes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Act on lead measures  &lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Once you had identified a goal, find a way to access if your plan is working.&lt;/li&gt;
&lt;li&gt;In context of software development, Instead of accessing the number of features shipped (lag indicator), try and access the number of deep work hours you were able to spend (lead indicator) on the feature.&lt;/li&gt;
&lt;li&gt;Idea is to control the behaviour in the short-term which will have a positive impact on your long term goals.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Keep a compelling scoreboard  &lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Keep a physical artifact in the workplace that displays the current deep work hours count.&lt;/li&gt;
&lt;li&gt;It will help you access if you are heading in the right direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Create a cadence of accountability  &lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;To maintain focus on the lead measures, a rhythm of regular checks on scoreboard should be done and the resuts must be analyzed.&lt;/li&gt;
&lt;li&gt;Corrective action should be taken if the results are not satisfactory. Regular accountability is must.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;/p&gt;&lt;h3 id="theories"&gt;Theories&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Unconscious Thought Theory (UTT)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Conscious brain is good for making decision where strict rules are involved. Unconscious brain is good for making decisions that involve large amount of information and multiple vague and perhaps even conflicting constraints. Providing you conscious brain time to rest enables your unconscious mind to take a shift sorting through your more complex challenges.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Attention Restoration Theory (ART)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Finding a way to free your mind from actively directing your attention and replacing it with enough interesting stimuli (like taking a walk, having a casual conversation with a friend, listening to music) to keep your mind occupied. This state allows your direction attention resources time to replenish which leads to better concentration.&lt;/p&gt;</content:encoded></item><item><title>Writing In Markdown</title><description>&lt;p&gt;Writing in Markdown format is great to be able to version control your documents.&lt;br&gt;
But Markdown may not be a easy when there is too much formatting involved. like, tables etc.&lt;/p&gt;
&lt;p&gt;Welcome Pandoc!&lt;/p&gt;
&lt;p&gt;With Pandoc, you can write your documents in Microsoft word and convert them into Markdown automatically.&lt;/p&gt;
&lt;h4 id="installation"&gt;Installation&lt;/h4&gt;</description><link>http://blog.vijayvikrant.com/writing-in-markdown/</link><guid isPermaLink="false">5bec34b10b000afff267798e</guid><category>pandoc</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Fri, 12 Oct 2018 04:48:45 GMT</pubDate><content:encoded>&lt;p&gt;Writing in Markdown format is great to be able to version control your documents.&lt;br&gt;
But Markdown may not be a easy when there is too much formatting involved. like, tables etc.&lt;/p&gt;
&lt;p&gt;Welcome Pandoc!&lt;/p&gt;
&lt;p&gt;With Pandoc, you can write your documents in Microsoft word and convert them into Markdown automatically.&lt;/p&gt;
&lt;h4 id="installation"&gt;Installation&lt;/h4&gt;
&lt;p&gt;For Mac OS,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;brew install pandoc
brew cask install basictex
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fire up a new terminal&lt;/p&gt;
&lt;p&gt;note: for other Operating systems - Pick the release from &lt;a href="https://github.com/jgm/pandoc/releases"&gt;https://github.com/jgm/pandoc/releases&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="convertingdocxtovariousformats"&gt;Converting .docx to various formats&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;pandoc --extract-media . test.docx -o test.md
pandoc --extract-media . test.docx -o test.pdf
pandoc --extract-media . test.docx -o test.epub
pandoc --extract-media . test.docx -o test.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--extract-media&lt;/code&gt; argument is required when you have pictures in the document. It defines the directory in which pictures are extracted and saved.&lt;/p&gt;
</content:encoded></item><item><title>Parallel Processing in Python</title><description>&lt;p&gt;Parallel processing has been made easy with the &lt;code&gt;multiprocessing&lt;/code&gt; library. Earlier we had to use a &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;Queue&lt;/code&gt; implementation to get a &lt;code&gt;ThreadPool&lt;/code&gt; functionality with multiple workers.&lt;/p&gt;
&lt;p&gt;This has been simplified in the &lt;code&gt;multiprocessing&lt;/code&gt; library. It is not very well documented though,&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;multiprocessing&lt;/code&gt; library in the ThreadPool mode,&lt;/p&gt;</description><link>http://blog.vijayvikrant.com/parallel-processing-in-python/</link><guid isPermaLink="false">5bec34b10b000afff267798d</guid><category>python</category><category>multiprocessing</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 18 Sep 2018 16:51:32 GMT</pubDate><content:encoded>&lt;p&gt;Parallel processing has been made easy with the &lt;code&gt;multiprocessing&lt;/code&gt; library. Earlier we had to use a &lt;code&gt;Thread&lt;/code&gt; and &lt;code&gt;Queue&lt;/code&gt; implementation to get a &lt;code&gt;ThreadPool&lt;/code&gt; functionality with multiple workers.&lt;/p&gt;
&lt;p&gt;This has been simplified in the &lt;code&gt;multiprocessing&lt;/code&gt; library. It is not very well documented though,&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;multiprocessing&lt;/code&gt; library in the ThreadPool mode,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from multiprocessing.dummy import Pool as ThreadPool

def dummy_print(my_string):
    print(&amp;quot;I am a harmless print:&amp;quot; + my_string)

def create_and_run_threadpool(input_map):
    number_of_workers = 5
    pool = ThreadPool(number_of_workers)
    
    # Call dummy_print with each element of the input_map. These calls are executed by the worker threads.
    results = pool.map(dummy_print, input_map)
    pool.close()
    pool.join()
    return results

if __name__ == '__main__':
    create_and_run_threadpool([&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;third&amp;quot;, &amp;quot;fourth&amp;quot;, &amp;quot;fifth&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code uses python threads and run all the code on the same CPU core. We can also make the workers run on different CPU cores. This is illustrated below,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from multiprocessing import Pool, cpu_count
from contextlib import closing

def dummy_print(my_string):
    print(my_string)

def create_and_run_workers_on_cores(input_map):    
    # Call dummy_print with each element of the input_map. These calls are executed by the workers across CPU cores.
    with closing(Pool(cpu_count())) as pool:
        results = pool.map(dummy_print, input_map)
        pool.close()
        pool.join()
    return results

if __name__ == '__main__':
    create_and_run_workers_on_cores([&amp;quot;first&amp;quot;, &amp;quot;second&amp;quot;, &amp;quot;third&amp;quot;, &amp;quot;fourth&amp;quot;, &amp;quot;fifth&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Fetching site cookies via Go</title><description>&lt;p&gt;Depicts the usage of cookiejar to retrieve cookies from a website.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyClient struct {
	client    http.Client    //http client
	jar       *cookiejar.Jar //jar
}

// init - initialises the http client
func (s *MyClient) init() {
	s.jar, _ = cookiejar.New(nil)
	s.client = http.Client{Jar: s.jar}
}

// getCookies - Gets cookies
func&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/fetching-site-cookies-via-go/</link><guid isPermaLink="false">5bec34b10b000afff267798c</guid><category>golang</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Fri, 14 Sep 2018 06:52:13 GMT</pubDate><content:encoded>&lt;p&gt;Depicts the usage of cookiejar to retrieve cookies from a website.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type MyClient struct {
	client    http.Client    //http client
	jar       *cookiejar.Jar //jar
}

// init - initialises the http client
func (s *MyClient) init() {
	s.jar, _ = cookiejar.New(nil)
	s.client = http.Client{Jar: s.jar}
}

// getCookies - Gets cookies
func (s *MyClient) getCookies() map[string][]*http.Cookie {
	cookies := make(map[string][]*http.Cookie)
	r, err := s.client.Get(&amp;quot;https://some-website.com&amp;quot;)
	if err != nil {
		fmt.Println(err)
		return cookies
	}
	defer r.Body.Close()
	siteCookies := s.jar.Cookies(r.Request.URL)
	cookies[&amp;quot;cookies&amp;quot;] = siteCookies
	return cookies
}


func main() {
	cc := &amp;amp;MyClient{}
	cc.init()
	cookies := cc.getCookies()
        fmt.Println(cookies)
}

&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Upgrading Fedora</title><description>&lt;p&gt;For self,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf upgrade --refresh
sudo dnf install dnf-plugin-system-upgrade
sudo dnf system-upgrade download --refresh --releasever=28
sudo dnf system-upgrade reboot
&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/upgrading-fedora/</link><guid isPermaLink="false">5bec34b10b000afff267798b</guid><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 12 Jun 2018 05:50:41 GMT</pubDate><content:encoded>&lt;p&gt;For self,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf upgrade --refresh
sudo dnf install dnf-plugin-system-upgrade
sudo dnf system-upgrade download --refresh --releasever=28
sudo dnf system-upgrade reboot
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Removing Duplicate Iptables Rules</title><description>&lt;p&gt;Snippet for removing duplicate entries from iptables&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables-save &amp;gt; /tmp/iptables_backup.conf
iptables-save | awk '!x[$0]++' &amp;gt; /tmp/iptables.conf
iptables -F
iptables-restore &amp;lt; /tmp/iptables.conf
service iptables save
service iptables restart
&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/removing-duplicate-iptables-rules/</link><guid isPermaLink="false">5bec34b10b000afff267798a</guid><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 12 Jun 2018 05:48:30 GMT</pubDate><content:encoded>&lt;p&gt;Snippet for removing duplicate entries from iptables&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;iptables-save &amp;gt; /tmp/iptables_backup.conf
iptables-save | awk '!x[$0]++' &amp;gt; /tmp/iptables.conf
iptables -F
iptables-restore &amp;lt; /tmp/iptables.conf
service iptables save
service iptables restart
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Running Commands As Apache User</title><description>&lt;p&gt;I have some django apps that run as apache user.&lt;br&gt;
And I frequently need to run some commands as an apache user from my regular user shell.&lt;/p&gt;
&lt;p&gt;The following function in &lt;code&gt;~/.bashrc&lt;/code&gt; is awesome for such use cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run_as_apache_user() {
    su -s &amp;quot;/bin/bash&amp;quot; -c &amp;quot;&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/running-commands-as-apache-user/</link><guid isPermaLink="false">5bec34b10b000afff2677989</guid><dc:creator>Vikrant Balyan</dc:creator><pubDate>Thu, 22 Feb 2018 18:41:13 GMT</pubDate><content:encoded>&lt;p&gt;I have some django apps that run as apache user.&lt;br&gt;
And I frequently need to run some commands as an apache user from my regular user shell.&lt;/p&gt;
&lt;p&gt;The following function in &lt;code&gt;~/.bashrc&lt;/code&gt; is awesome for such use cases&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;run_as_apache_user() {
    su -s &amp;quot;/bin/bash&amp;quot; -c &amp;quot;$1&amp;quot; apache
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ run_as_apache_user 'svn up'
$ run_as_apache_user 'ls'
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Analyzing Stock Tradebook With R</title><description>&lt;p&gt;Given a year worth of trades, the following R script detects the stocks that were not directly bought. They were either acquired as a part of a bonus, split or IPO.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setwd(&amp;quot;/Users/vvb/work/projects/trades&amp;quot;)
getwd()

library(data.table)
library(readxl)

trades &amp;lt;- readxl::read_&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/analyzing_stock_tradebook_with_r/</link><guid isPermaLink="false">5bec34b10b000afff2677988</guid><category>R</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Sun, 11 Feb 2018 18:45:54 GMT</pubDate><content:encoded>&lt;p&gt;Given a year worth of trades, the following R script detects the stocks that were not directly bought. They were either acquired as a part of a bonus, split or IPO.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;setwd(&amp;quot;/Users/vvb/work/projects/trades&amp;quot;)
getwd()

library(data.table)
library(readxl)

trades &amp;lt;- readxl::read_excel(&amp;quot;tradebook.xlsx&amp;quot;, sheet = &amp;quot;TRADEBOOK&amp;quot;)
trades &amp;lt;- trades %&amp;gt;% as.data.table()
head(trades)

findUnbalancedTrades &amp;lt;- function(trades) {
  trades1 &amp;lt;- trades[Type==&amp;quot;S&amp;quot;,Qty:=-Qty]
  trades2 &amp;lt;- trades1 %&amp;gt;% group_by(Symbol) %&amp;gt;% summarise(Balance = sum(Qty)) %&amp;gt;% as.data.table()
  noBuyTrades &amp;lt;- trades2[Balance &amp;lt; 0]
  if (nrow(noBuyTrades) == 0) {
    print(&amp;quot;Trades are balanced&amp;quot;)
  } else {
    print(&amp;quot;The following trades are not balanced&amp;quot;)
    print(noBuyTrades)
  }
}

findUnbalancedTrades(trades)


&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; setwd(&amp;quot;/Users/vvb/work/projects/trades&amp;quot;)
&amp;gt; getwd()
[1] &amp;quot;/Users/vvb/work/projects/trades&amp;quot;
&amp;gt; library(data.table)
&amp;gt; library(readxl)
&amp;gt; trades &amp;lt;- readxl::read_excel(&amp;quot;tradebook.xlsx&amp;quot;, sheet = &amp;quot;TRADEBOOK&amp;quot;)
&amp;gt; trades &amp;lt;- trades %&amp;gt;% as.data.table()
&amp;gt; head(trades)
   Trade date          Trade time Exchange    Symbol Type Qty   Rate         Order no Trade no
1: 23-06-2017 1899-12-31 10:07:37      NSE SUNPHARMA    B   2 542.75 1300000000966218 75365300
2: 23-06-2017 1899-12-31 10:07:37      NSE SUNPHARMA    B  30 542.75 1300000000966218 75365299
3: 23-06-2017 1899-12-31 10:07:37      NSE SUNPHARMA    B  28 542.75 1300000000966218 75365303
4: 23-06-2017 1899-12-31 10:07:37      NSE SUNPHARMA    B   2 542.75 1300000000966218 75365302
5: 23-06-2017 1899-12-31 10:07:37      NSE SUNPHARMA    B  30 542.75 1300000000966218 75365301
6: 27-06-2017 1899-12-31 15:12:07      NSE       TWL    B 500 114.90 1300000003434722 76788334
&amp;gt; findUnbalancedTrades &amp;lt;- function(trades) {
+   trades1 &amp;lt;- trades[Type==&amp;quot;S&amp;quot;,Qty:=-Qty]
+   trades2 &amp;lt;- trades1 %&amp;gt;% group_by(Symbol) %&amp;gt;% summarise(Balance = sum(Qty)) %&amp;gt;% as.data.table()
+   noBuyTrades &amp;lt;- trades2[Balance &amp;lt; 0]
+   if (nrow(noBuyTrades) == 0) {
+     print(&amp;quot;Trades are balanced&amp;quot;)
+   } else {
+     print(&amp;quot;The following trades are not balanced&amp;quot;)
+     print(noBuyTrades)
+   }
+ }
&amp;gt; findUnbalancedTrades(trades)
[1] &amp;quot;The following trades are not balanced&amp;quot;
       Symbol Balance
1: GODREJAGRO     -32
2:   RELIANCE    -200
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>A Day With R</title><description>&lt;h3 id="datatypes"&gt;Datatypes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;vector&lt;/code&gt; is always homogenous&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;list&lt;/code&gt; can be heterogenous&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;matrix&lt;/code&gt; is a list of vectors&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;dataframe&lt;/code&gt; is a list of lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;stockprice &amp;lt;- 1900L
class(stockprice)

stocks &amp;lt;- c(&amp;quot;HEG&amp;quot;, &amp;quot;Graphite&amp;quot;, &amp;quot;Bajaj&amp;quot;, &amp;quot;L&amp;amp;T&amp;quot;)
prices&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/a-day-with-r/</link><guid isPermaLink="false">5bec34b10b000afff2677987</guid><category>R</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 06 Feb 2018 06:43:33 GMT</pubDate><content:encoded>&lt;h3 id="datatypes"&gt;Datatypes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;vector&lt;/code&gt; is always homogenous&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;list&lt;/code&gt; can be heterogenous&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;matrix&lt;/code&gt; is a list of vectors&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;dataframe&lt;/code&gt; is a list of lists.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;stockprice &amp;lt;- 1900L
class(stockprice)

stocks &amp;lt;- c(&amp;quot;HEG&amp;quot;, &amp;quot;Graphite&amp;quot;, &amp;quot;Bajaj&amp;quot;, &amp;quot;L&amp;amp;T&amp;quot;)
prices &amp;lt;- c(1900L, 650L, 500L, 1380L)
names(stocks) &amp;lt;- c(&amp;quot;Carbon&amp;quot;, &amp;quot;Carbon&amp;quot;, &amp;quot;Auto&amp;quot;, &amp;quot;Infra&amp;quot;)

isAuto &amp;lt;- TRUE
isAuto &amp;lt;- FALSE

data = factor(names(stocks))

mat1 &amp;lt;- matrix(c(1:10), nrow=2)
mat1 &amp;lt;- matrix(c(1:40), nrow=4)

p &amp;lt;- c(6,8,10)
p1 &amp;lt;- list(6,8,10)
p2 &amp;lt;- list(c(6,8,10))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="vectorofnumericvalues"&gt;Vector of numeric values&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;p &amp;lt;- c(6,8,10)

&amp;gt; p
[1]  6  8 10
&amp;gt;
&amp;gt; for (i in 1:length(p)) {
+   print(p[[i]]*2)
+ }
[1] 12
[1] 16
[1] 20
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="listofvectorof3elems"&gt;List of vector of 3 elems&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;p1 &amp;lt;- list(6,8,10)
&amp;gt; p1
[[1]]
[1] 6

[[2]]
[1] 8

[[3]]
[1] 10

&amp;gt; for (each in p1) {
+   print(each*2)
+ }
[1] 12
[1] 16
[1] 20
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="listofvectorofoneelemwhichisalsoalist"&gt;List of vector of one elem which is also a list&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;p2 &amp;lt;- list(c(6,8,10))
&amp;gt; p2
[[1]]
[1]  6  8 10

&amp;gt; for (i in 1:length(p2[[1]])) {
+   print(p2[[1]][i]*2)
+ }
[1] 12
[1] 16
[1] 20
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="lapply"&gt;lapply&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;output is always a list&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mul &amp;lt;- function(x){x*2}
&amp;gt; p
[1]  6  8 10
&amp;gt; lapply(p, mul)
[[1]]
[1] 12

[[2]]
[1] 16

[[3]]
[1] 20

&amp;gt; p1
[[1]]
[1] 6

[[2]]
[1] 8

[[3]]
[1] 10

&amp;gt; lapply(p1, mul)
[[1]]
[1] 12

[[2]]
[1] 16

[[3]]
[1] 20

&amp;gt; unlist(lapply(p1, mul))
[1] 12 16 20
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="sapply"&gt;sapply&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Good for reporting.&lt;/li&gt;
&lt;li&gt;Needs high level of confidence in data structures used.&lt;/li&gt;
&lt;li&gt;Output can be vector or matrix or list&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mul &amp;lt;- function(x){x*2}
&amp;gt; p
[1]  6  8 10
&amp;gt; sapply(p, mul)
[1] 12 16 20
&amp;gt; p1
[[1]]
[1] 6

[[2]]
[1] 8

[[3]]
[1] 10

&amp;gt; sapply(p1, mul)
[1] 12 16 20
&amp;gt; p2
[[1]]
[1]  6  8 10

&amp;gt; sapply(p2, mul)
     [,1]
[1,]   12
[2,]   16
[3,]   20
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="vapply"&gt;vapply&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Verify apply&lt;/li&gt;
&lt;li&gt;Verifies if the return type of the function matches with the last arg&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mul &amp;lt;- function(x){x*2}
&amp;gt; p
[1]  6  8 10
&amp;gt; vapply(p, mul, numeric(1))
[1] 12 16 20
&amp;gt; p
[1]  6  8 10
&amp;gt; vapply(p, mul, numeric(2))
Error in vapply(p, mul, numeric(2)) : values must be length 2,
 but FUN(X[[1]]) result is length 1
&amp;gt; p
[1]  6  8 10
&amp;gt; vapply(p, mul, character(1))
Error in vapply(p, mul, character(1)) : values must be type 'character',
 but FUN(X[[1]]) result is type 'double'
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="tapply"&gt;tapply&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;split, apply, combine&lt;/li&gt;
&lt;li&gt;group_by and for each group do a task&lt;/li&gt;
&lt;li&gt;outputs an array&lt;/li&gt;
&lt;li&gt;tapply can have only one y variable, multiple x variables. i.e. mean sepal length for multiple species.&lt;/li&gt;
&lt;li&gt;aggregate can also be used for the same purpose&lt;/li&gt;
&lt;li&gt;aggregate gives data frame as output&lt;/li&gt;
&lt;li&gt;aggregate can have multiple x and multiple y variables. i.e. sales and profit number for multiple companies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="exercise1"&gt;Exercise #1&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q - From a given list of names print the min and max char in every name in a report format.&lt;/li&gt;
&lt;li&gt;The below also demonstrates the difference between lapply and sapply.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; names &amp;lt;- c(&amp;quot;Ankur&amp;quot;, &amp;quot;Ganesan&amp;quot;, &amp;quot;Bhargavi&amp;quot;, &amp;quot;pankaj&amp;quot;, &amp;quot;Vivek&amp;quot;, &amp;quot;Srikrishnan&amp;quot;)
&amp;gt; firstlast &amp;lt;- function(x) {
+   s &amp;lt;- strsplit(x, &amp;quot;&amp;quot;)[[1]]
+   return(c(first=min(s), last=max(s)))
+   
+ }
&amp;gt; lapply(names, firstlast)
[[1]]
first  last 
  &amp;quot;A&amp;quot;   &amp;quot;u&amp;quot; 

[[2]]
first  last 
  &amp;quot;G&amp;quot;   &amp;quot;s&amp;quot; 

[[3]]
first  last 
  &amp;quot;B&amp;quot;   &amp;quot;v&amp;quot; 

[[4]]
first  last 
  &amp;quot;a&amp;quot;   &amp;quot;p&amp;quot; 

[[5]]
first  last 
  &amp;quot;V&amp;quot;   &amp;quot;v&amp;quot; 

[[6]]
first  last 
  &amp;quot;S&amp;quot;   &amp;quot;s&amp;quot; 
&amp;gt; class(lapply(names, firstlast))
[1] &amp;quot;list&amp;quot;
&amp;gt;
&amp;gt; sapply(names, firstlast)
      Ankur Ganesan Bhargavi pankaj Vivek Srikrishnan
first &amp;quot;A&amp;quot;   &amp;quot;G&amp;quot;     &amp;quot;B&amp;quot;      &amp;quot;a&amp;quot;    &amp;quot;V&amp;quot;   &amp;quot;S&amp;quot;        
last  &amp;quot;u&amp;quot;   &amp;quot;s&amp;quot;     &amp;quot;v&amp;quot;      &amp;quot;p&amp;quot;    &amp;quot;v&amp;quot;   &amp;quot;s&amp;quot;        
&amp;gt;
&amp;gt; class(sapply(names, firstlast))
[1] &amp;quot;matrix&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="exercise2"&gt;Exercise #2&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Q - from a given list of names print only the unique characters per name&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; names &amp;lt;- c(&amp;quot;ankur&amp;quot;, &amp;quot;ganesan&amp;quot;, &amp;quot;bhargavi&amp;quot;, &amp;quot;pankaj&amp;quot;, &amp;quot;vivek&amp;quot;, &amp;quot;srikrishnan&amp;quot;)
&amp;gt; uniquenames &amp;lt;- function(x) {
+   s &amp;lt;- strsplit(x, &amp;quot;&amp;quot;)[[1]]
+   return(unique(s))
+ }

&amp;gt; sapply(names, uniquenames)
$ankur
[1] &amp;quot;a&amp;quot; &amp;quot;n&amp;quot; &amp;quot;k&amp;quot; &amp;quot;u&amp;quot; &amp;quot;r&amp;quot;

$ganesan
[1] &amp;quot;g&amp;quot; &amp;quot;a&amp;quot; &amp;quot;n&amp;quot; &amp;quot;e&amp;quot; &amp;quot;s&amp;quot;

$bhargavi
[1] &amp;quot;b&amp;quot; &amp;quot;h&amp;quot; &amp;quot;a&amp;quot; &amp;quot;r&amp;quot; &amp;quot;g&amp;quot; &amp;quot;v&amp;quot; &amp;quot;i&amp;quot;

$pankaj
[1] &amp;quot;p&amp;quot; &amp;quot;a&amp;quot; &amp;quot;n&amp;quot; &amp;quot;k&amp;quot; &amp;quot;j&amp;quot;

$vivek
[1] &amp;quot;v&amp;quot; &amp;quot;i&amp;quot; &amp;quot;e&amp;quot; &amp;quot;k&amp;quot;

$srikrishnan
[1] &amp;quot;s&amp;quot; &amp;quot;r&amp;quot; &amp;quot;i&amp;quot; &amp;quot;k&amp;quot; &amp;quot;h&amp;quot; &amp;quot;n&amp;quot; &amp;quot;a&amp;quot;

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tidythedata"&gt;Tidy the data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We use &lt;code&gt;reshape2&lt;/code&gt; and &lt;code&gt;tidyr&lt;/code&gt; libraries here.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reshape2&lt;/code&gt; provides us the &lt;code&gt;melt&lt;/code&gt; method that will help us convert data from report format to a more program friendly format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tidyr&lt;/code&gt; provides us with the &lt;code&gt;gather&lt;/code&gt; API, this does exactly the same thing as &lt;code&gt;melt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the below example we hav religions as rows and salary ranges as columns.&lt;/li&gt;
&lt;li&gt;To convert it to tidy data we need to stack religion:salary_range as rows.&lt;/li&gt;
&lt;li&gt;Tidy data allows for easy operation on the dataset - like groupby, filter etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; setwd(&amp;quot;/Users/vvb/work/projects/datascience&amp;quot;)
&amp;gt; getwd()
[1] &amp;quot;/Users/vvb/work/projects/datascience&amp;quot;

&amp;gt; rawdata &amp;lt;- read.csv(&amp;quot;pew.csv&amp;quot;, check.names = F, encoding = &amp;quot;UTF-8&amp;quot;)
&amp;gt; head(rawdata)
                   religion &amp;lt;$10k $10-20k $20-30k $30-40k $40-50k $50-75k $75-100k $100-150k &amp;gt;150k Don't know/refused
1                  Agnostic    27      34      60      81      76     137      122       109    84                 96
2                   Atheist    12      27      37      52      35      70       73        59    74                 76
3                  Buddhist    27      21      30      34      33      58       62        39    53                 54
4                  Catholic   418     617     732     670     638    1116      949       792   633               1489
5 Don&amp;lt;U+2019&amp;gt;t know/refused    15      14      15      11      10      35       21        17    18                116
6          Evangelical Prot   575     869    1064     982     881    1486      949       723   414               1529

&amp;gt; library(reshape2)
&amp;gt; library(tidyr)
&amp;gt; tidydata &amp;lt;- rawdata %&amp;gt;%
+               melt(id= &amp;quot;religion&amp;quot;,
+                    variable.name = &amp;quot;salary&amp;quot;,
+                    value.name = &amp;quot;count&amp;quot;)

&amp;gt; head(tidydata)
                   religion salary count
1                  Agnostic  &amp;lt;$10k    27
2                   Atheist  &amp;lt;$10k    12
3                  Buddhist  &amp;lt;$10k    27
4                  Catholic  &amp;lt;$10k   418
5 Don&amp;lt;U+2019&amp;gt;t know/refused  &amp;lt;$10k    15
6          Evangelical Prot  &amp;lt;$10k   575

&amp;gt; tidydata2 &amp;lt;- rawdata %&amp;gt;%
+                 gather(2:11,
+                        key = &amp;quot;salary&amp;quot;,
+                        value = &amp;quot;count&amp;quot;)

&amp;gt; head(tidydata2)
                   religion salary count
1                  Agnostic  &amp;lt;$10k    27
2                   Atheist  &amp;lt;$10k    12
3                  Buddhist  &amp;lt;$10k    27
4                  Catholic  &amp;lt;$10k   418
5 Don&amp;lt;U+2019&amp;gt;t know/refused  &amp;lt;$10k    15
6          Evangelical Prot  &amp;lt;$10k   575
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Below is the min and max temperature data for various (year, month, day) pairs.&lt;/li&gt;
&lt;li&gt;We need to transform this to a &lt;code&gt;year:month:day&lt;/code&gt; as row format.&lt;/li&gt;
&lt;li&gt;Note that id can be a list of columns - &lt;code&gt;c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;element&amp;quot;)&lt;/code&gt; where element is &lt;code&gt;temp_max/temp_min&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; rawdata1 &amp;lt;- read.delim(&amp;quot;weather.txt&amp;quot;, check.names = F, na.strings = '.')
&amp;gt; head(rawdata1)
  year month element  1   2   3  4   5  6  7  8  9  10  11 12 13 14 15  16 17 18 19 20 21 22  23 24 25 26 27 28 29  30 31
1 2010     1    tmax NA  NA  NA NA  NA NA NA NA NA  NA  NA NA NA NA NA  NA NA NA NA NA NA NA  NA NA NA NA NA NA NA 278 NA
2 2010     1    tmin NA  NA  NA NA  NA NA NA NA NA  NA  NA NA NA NA NA  NA NA NA NA NA NA NA  NA NA NA NA NA NA NA 145 NA
3 2010     2    tmax NA 273 241 NA  NA NA NA NA NA  NA 297 NA NA NA NA  NA NA NA NA NA NA NA 299 NA NA NA NA NA NA  NA NA
4 2010     2    tmin NA 144 144 NA  NA NA NA NA NA  NA 134 NA NA NA NA  NA NA NA NA NA NA NA 107 NA NA NA NA NA NA  NA NA
5 2010     3    tmax NA  NA  NA NA 321 NA NA NA NA 345  NA NA NA NA NA 311 NA NA NA NA NA NA  NA NA NA NA NA NA NA  NA NA
6 2010     3    tmin NA  NA  NA NA 142 NA NA NA NA 168  NA NA NA NA NA 176 NA NA NA NA NA NA  NA NA NA NA NA NA NA  NA NA
&amp;gt; str(rawdata1)
'data.frame':	22 obs. of  34 variables:
 $ year   : int  2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ...
 $ month  : int  1 1 2 2 3 3 4 4 5 5 ...
 $ element: Factor w/ 2 levels &amp;quot;tmax&amp;quot;,&amp;quot;tmin&amp;quot;: 1 2 1 2 1 2 1 2 1 2 ...
 $ 1      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 2      : int  NA NA 273 144 NA NA NA NA NA NA ...
 $ 3      : int  NA NA 241 144 NA NA NA NA NA NA ...
 $ 4      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 5      : int  NA NA NA NA 321 142 NA NA NA NA ...
 $ 6      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 7      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 8      : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 9      : logi  NA NA NA NA NA NA ...
 $ 10     : int  NA NA NA NA 345 168 NA NA NA NA ...
 $ 11     : int  NA NA 297 134 NA NA NA NA NA NA ...
 $ 12     : logi  NA NA NA NA NA NA ...
 $ 13     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 14     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 15     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 16     : int  NA NA NA NA 311 176 NA NA NA NA ...
 $ 17     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 18     : logi  NA NA NA NA NA NA ...
 $ 19     : logi  NA NA NA NA NA NA ...
 $ 20     : logi  NA NA NA NA NA NA ...
 $ 21     : logi  NA NA NA NA NA NA ...
 $ 22     : logi  NA NA NA NA NA NA ...
 $ 23     : int  NA NA 299 107 NA NA NA NA NA NA ...
 $ 24     : logi  NA NA NA NA NA NA ...
 $ 25     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 26     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 27     : int  NA NA NA NA NA NA 363 167 332 182 ...
 $ 28     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 29     : int  NA NA NA NA NA NA NA NA NA NA ...
 $ 30     : int  278 145 NA NA NA NA NA NA NA NA ...
 $ 31     : int  NA NA NA NA NA NA NA NA NA NA ...
&amp;gt; tidydata3 &amp;lt;- rawdata1 %&amp;gt;% melt(id = c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;element&amp;quot;),
+                                variable.name = &amp;quot;day&amp;quot;,
+                                value.name = &amp;quot;temp&amp;quot;)
&amp;gt; head(tidydata3)
  year month element day temp
1 2010     1    tmax   1   NA
2 2010     1    tmin   1   NA
3 2010     2    tmax   1   NA
4 2010     2    tmin   1   NA
5 2010     3    tmax   1   NA
6 2010     3    tmin   1   NA
&amp;gt; tidydata4 &amp;lt;- rawdata1 %&amp;gt;% melt(id = c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;element&amp;quot;),
+                                variable.name = &amp;quot;day&amp;quot;,
+                                value.name = &amp;quot;temp&amp;quot;,
+                                na.rm = TRUE)
&amp;gt; head(tidydata4)
   year month element day temp
21 2010    12    tmax   1  299
22 2010    12    tmin   1  138
25 2010     2    tmax   2  273
26 2010     2    tmin   2  144
41 2010    11    tmax   2  313
42 2010    11    tmin   2  163
&amp;gt; tidydata5 &amp;lt;- rawdata1 %&amp;gt;% gather(4:34, 
+                                  key = &amp;quot;day&amp;quot;,
+                                  value = &amp;quot;temp&amp;quot;)
&amp;gt; head(tidydata5)
  year month element day temp
1 2010     1    tmax   1   NA
2 2010     1    tmin   1   NA
3 2010     2    tmax   1   NA
4 2010     2    tmin   1   NA
5 2010     3    tmax   1   NA
6 2010     3    tmin   1   NA
&amp;gt; tidydata6 &amp;lt;- rawdata1 %&amp;gt;% gather(4:34, 
+                                  key = &amp;quot;day&amp;quot;,
+                                  value = &amp;quot;temp&amp;quot;,
+                                  na.rm = TRUE)
&amp;gt; head(tidydata6)
   year month element day temp
21 2010    12    tmax   1  299
22 2010    12    tmin   1  138
25 2010     2    tmax   2  273
26 2010     2    tmin   2  144
41 2010    11    tmax   2  313
42 2010    11    tmin   2  163
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="dcastandspread"&gt;dcast and spread&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; # transform the data to a format that dcast can use
&amp;gt; tidydata7 &amp;lt;- tidydata6[,c(&amp;quot;year&amp;quot;, &amp;quot;month&amp;quot;, &amp;quot;day&amp;quot;, &amp;quot;element&amp;quot;, &amp;quot;temp&amp;quot;)]
&amp;gt; head(tidydata7)
   year month day element temp
21 2010    12   1    tmax  299
22 2010    12   1    tmin  138
25 2010     2   2    tmax  273
26 2010     2   2    tmin  144
41 2010    11   2    tmax  313
42 2010    11   2    tmin  163
&amp;gt; # use element values as column names, pick the values from &amp;quot;temp&amp;quot;
&amp;gt; tidydata8 &amp;lt;- dcast(year + month + day ~ element, data = tidydata7, value.var = &amp;quot;temp&amp;quot;)
&amp;gt; head(tidydata8)
  year month day tmax tmin
1 2010     1  30  278  145
2 2010     2  11  297  134
3 2010     2   2  273  144
4 2010     2  23  299  107
5 2010     2   3  241  144
6 2010     3  10  345  168
&amp;gt; # do the same using spread - spread element as columns and use values from temp
&amp;gt; tidydata9 &amp;lt;- spread(tidydata6, element, temp)
&amp;gt; head(tidydata9)
  year month day tmax tmin
1 2010     1  30  278  145
2 2010     2  11  297  134
3 2010     2   2  273  144
4 2010     2  23  299  107
5 2010     2   3  241  144
6 2010     3  10  345  168
&amp;gt; # adding a new column which shows difference in temperature
&amp;gt; tidydata8$tdiff &amp;lt;- tidydata8$tmax - tidydata8$tmin
&amp;gt; head(tidydata8)
  year month day tmax tmin tdiff
1 2010     1  30  278  145   133
2 2010     2  11  297  134   163
3 2010     2   2  273  144   129
4 2010     2  23  299  107   192
5 2010     2   3  241  144    97
6 2010     3  10  345  168   177
&amp;gt;
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="analyzethetitanicshipwreckdatatoanswerthefollowing"&gt;Analyze the titanic shipwreck data to answer the following,&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;For each group of Class+Age+Gender what is the survival rate?&lt;/li&gt;
&lt;li&gt;To answer this question, we need to transform the given data&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; rawdata2 &amp;lt;- read.csv(&amp;quot;shipwreck.csv&amp;quot;, check.names = F, encoding = &amp;quot;UTF-8&amp;quot;)
&amp;gt; rawdata2
   class   age     fate male female
1    1st adult perished  118      4
2    1st adult survived   57    140
3    1st child perished    0      0
4    1st child survived    5      1
5    2nd adult perished  154     13
6    2nd adult survived   14     80
7    2nd child perished    0      0
8    2nd child survived   11     13
9    3rd adult perished  387     89
10   3rd adult survived   75     76
11   3rd child perished   35     17
12   3rd child survived   13     14
13  Crew adult perished  670      3
14  Crew adult survived  192     20
15  Crew child perished    0      0
16  Crew child survived    0      0

&amp;gt; # Q - For each group of Class+Age+Gender what is the survival rate?
&amp;gt; tidydata10 &amp;lt;- rawdata2 %&amp;gt;% gather(4:5,
+                                   key = &amp;quot;gender&amp;quot;,
+                                   value = &amp;quot;count&amp;quot;)
&amp;gt; tidydata10
   class   age     fate gender count
1    1st adult perished   male   118
2    1st adult survived   male    57
3    1st child perished   male     0
4    1st child survived   male     5
5    2nd adult perished   male   154
6    2nd adult survived   male    14
7    2nd child perished   male     0
8    2nd child survived   male    11
9    3rd adult perished   male   387
10   3rd adult survived   male    75
11   3rd child perished   male    35
12   3rd child survived   male    13
13  Crew adult perished   male   670
14  Crew adult survived   male   192
15  Crew child perished   male     0
16  Crew child survived   male     0
17   1st adult perished female     4
18   1st adult survived female   140
19   1st child perished female     0
20   1st child survived female     1
21   2nd adult perished female    13
22   2nd adult survived female    80
23   2nd child perished female     0
24   2nd child survived female    13
25   3rd adult perished female    89
26   3rd adult survived female    76
27   3rd child perished female    17
28   3rd child survived female    14
29  Crew adult perished female     3
30  Crew adult survived female    20
31  Crew child perished female     0
32  Crew child survived female     0

&amp;gt; tidydata10 &amp;lt;- tidydata10 %&amp;gt;% spread(fate, count)
&amp;gt; tidydata10
   class   age gender perished survived
1    1st adult female        4      140
2    1st adult   male      118       57
3    1st child female        0        1
4    1st child   male        0        5
5    2nd adult female       13       80
6    2nd adult   male      154       14
7    2nd child female        0       13
8    2nd child   male        0       11
9    3rd adult female       89       76
10   3rd adult   male      387       75
11   3rd child female       17       14
12   3rd child   male       35       13
13  Crew adult female        3       20
14  Crew adult   male      670      192
15  Crew child female        0        0
16  Crew child   male        0        0
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id="deplyr"&gt;deplyr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;arrange&lt;/li&gt;
&lt;li&gt;mutate&lt;/li&gt;
&lt;li&gt;summarize&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;group_by&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; # filter data for Jan
&amp;gt; head(flights)
# A tibble: 6 x 19
   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
1  2013     1     1      517            515      2.00      830            819      11.0 UA        1545 N14228  EWR    IAH        227     1400  5.00   15.0
2  2013     1     1      533            529      4.00      850            830      20.0 UA        1714 N24211  LGA    IAH        227     1416  5.00   29.0
3  2013     1     1      542            540      2.00      923            850      33.0 AA        1141 N619AA  JFK    MIA        160     1089  5.00   40.0
4  2013     1     1      544            545     -1.00     1004           1022     -18.0 B6         725 N804JB  JFK    BQN        183     1576  5.00   45.0
5  2013     1     1      554            600     -6.00      812            837     -25.0 DL         461 N668DN  LGA    ATL        116      762  6.00    0  
6  2013     1     1      554            558     -4.00      740            728      12.0 UA        1696 N39463  EWR    ORD        150      719  5.00   58.0
# ... with 1 more variable: time_hour &amp;lt;dttm&amp;gt;
&amp;gt; flights %&amp;gt;% filter(month==1)
# A tibble: 27,004 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
 1  2013     1     1      517            515      2.00      830            819     11.0  UA        1545 N14228  EWR    IAH      227       1400  5.00   15.0
 2  2013     1     1      533            529      4.00      850            830     20.0  UA        1714 N24211  LGA    IAH      227       1416  5.00   29.0
 3  2013     1     1      542            540      2.00      923            850     33.0  AA        1141 N619AA  JFK    MIA      160       1089  5.00   40.0
 4  2013     1     1      544            545     -1.00     1004           1022    -18.0  B6         725 N804JB  JFK    BQN      183       1576  5.00   45.0
 5  2013     1     1      554            600     -6.00      812            837    -25.0  DL         461 N668DN  LGA    ATL      116        762  6.00    0  
 6  2013     1     1      554            558     -4.00      740            728     12.0  UA        1696 N39463  EWR    ORD      150        719  5.00   58.0
 7  2013     1     1      555            600     -5.00      913            854     19.0  B6         507 N516JB  EWR    FLL      158       1065  6.00    0  
 8  2013     1     1      557            600     -3.00      709            723    -14.0  EV        5708 N829AS  LGA    IAD       53.0      229  6.00    0  
 9  2013     1     1      557            600     -3.00      838            846    - 8.00 B6          79 N593JB  JFK    MCO      140        944  6.00    0  
10  2013     1     1      558            600     -2.00      753            745      8.00 AA         301 N3ALAA  LGA    ORD      138        733  6.00    0  
# ... with 26,994 more rows, and 1 more variable: time_hour &amp;lt;dttm&amp;gt;
&amp;gt; # filter data for Nov and Dec
&amp;gt; flights %&amp;gt;% filter(month==11 | month == 12)
# A tibble: 55,403 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
 1  2013    11     1        5           2359      6.00      352            345      7.00 B6         745 N568JB  JFK    PSE      205       1617 23.0    59.0
 2  2013    11     1       35           2250    105         123           2356     87.0  B6        1816 N353JB  JFK    SYR       36.0      209 22.0    50.0
 3  2013    11     1      455            500   -  5.00      641            651    -10.0  US        1895 N192UW  EWR    CLT       88.0      529  5.00    0  
 4  2013    11     1      539            545   -  6.00      856            827     29.0  UA        1714 N38727  LGA    IAH      229       1416  5.00   45.0
 5  2013    11     1      542            545   -  3.00      831            855    -24.0  AA        2243 N5CLAA  JFK    MIA      147       1089  5.00   45.0
 6  2013    11     1      549            600   - 11.0       912            923    -11.0  UA         303 N595UA  JFK    SFO      359       2586  6.00    0  
 7  2013    11     1      550            600   - 10.0       705            659      6.00 US        2167 N748UW  LGA    DCA       57.0      214  6.00    0  
 8  2013    11     1      554            600   -  6.00      659            701    - 2.00 US        2134 N742PS  LGA    BOS       40.0      184  6.00    0  
 9  2013    11     1      554            600   -  6.00      826            827    - 1.00 DL         563 N912DE  LGA    ATL      126        762  6.00    0  
10  2013    11     1      554            600   -  6.00      749            751    - 2.00 DL         731 N315NB  LGA    DTW       93.0      502  6.00    0  
# ... with 55,393 more rows, and 1 more variable: time_hour &amp;lt;dttm&amp;gt;
&amp;gt; flights %&amp;gt;% filter(month %in% c(11,12))
# A tibble: 55,403 x 19
    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour minute
   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
 1  2013    11     1        5           2359      6.00      352            345      7.00 B6         745 N568JB  JFK    PSE      205       1617 23.0    59.0
 2  2013    11     1       35           2250    105         123           2356     87.0  B6        1816 N353JB  JFK    SYR       36.0      209 22.0    50.0
 3  2013    11     1      455            500   -  5.00      641            651    -10.0  US        1895 N192UW  EWR    CLT       88.0      529  5.00    0  
 4  2013    11     1      539            545   -  6.00      856            827     29.0  UA        1714 N38727  LGA    IAH      229       1416  5.00   45.0
 5  2013    11     1      542            545   -  3.00      831            855    -24.0  AA        2243 N5CLAA  JFK    MIA      147       1089  5.00   45.0
 6  2013    11     1      549            600   - 11.0       912            923    -11.0  UA         303 N595UA  JFK    SFO      359       2586  6.00    0  
 7  2013    11     1      550            600   - 10.0       705            659      6.00 US        2167 N748UW  LGA    DCA       57.0      214  6.00    0  
 8  2013    11     1      554            600   -  6.00      659            701    - 2.00 US        2134 N742PS  LGA    BOS       40.0      184  6.00    0  
 9  2013    11     1      554            600   -  6.00      826            827    - 1.00 DL         563 N912DE  LGA    ATL      126        762  6.00    0  
10  2013    11     1      554            600   -  6.00      749            751    - 2.00 DL         731 N315NB  LGA    DTW       93.0      502  6.00    0  
# ... with 55,393 more rows, and 1 more variable: time_hour &amp;lt;dttm&amp;gt;
&amp;gt; # filter data with departure and arrival delay &amp;lt; 2 hours
&amp;gt; str(flights)
Classes 'tbl_df', 'tbl' and 'data.frame':	336776 obs. of  19 variables:
 $ year          : int  2013 2013 2013 2013 2013 2013 2013 2013 2013 2013 ...
 $ month         : int  1 1 1 1 1 1 1 1 1 1 ...
 $ day           : int  1 1 1 1 1 1 1 1 1 1 ...
 $ dep_time      : int  517 533 542 544 554 554 555 557 557 558 ...
 $ sched_dep_time: int  515 529 540 545 600 558 600 600 600 600 ...
 $ dep_delay     : num  2 4 2 -1 -6 -4 -5 -3 -3 -2 ...
 $ arr_time      : int  830 850 923 1004 812 740 913 709 838 753 ...
 $ sched_arr_time: int  819 830 850 1022 837 728 854 723 846 745 ...
 $ arr_delay     : num  11 20 33 -18 -25 12 19 -14 -8 8 ...
 $ carrier       : chr  &amp;quot;UA&amp;quot; &amp;quot;UA&amp;quot; &amp;quot;AA&amp;quot; &amp;quot;B6&amp;quot; ...
 $ flight        : int  1545 1714 1141 725 461 1696 507 5708 79 301 ...
 $ tailnum       : chr  &amp;quot;N14228&amp;quot; &amp;quot;N24211&amp;quot; &amp;quot;N619AA&amp;quot; &amp;quot;N804JB&amp;quot; ...
 $ origin        : chr  &amp;quot;EWR&amp;quot; &amp;quot;LGA&amp;quot; &amp;quot;JFK&amp;quot; &amp;quot;JFK&amp;quot; ...
 $ dest          : chr  &amp;quot;IAH&amp;quot; &amp;quot;IAH&amp;quot; &amp;quot;MIA&amp;quot; &amp;quot;BQN&amp;quot; ...
 $ air_time      : num  227 227 160 183 116 150 158 53 140 138 ...
 $ distance      : num  1400 1416 1089 1576 762 ...
 $ hour          : num  5 5 5 5 6 5 6 6 6 6 ...
 $ minute        : num  15 29 40 45 0 58 0 0 0 0 ...
 $ time_hour     : POSIXct, format: &amp;quot;2013-01-01 05:00:00&amp;quot; &amp;quot;2013-01-01 05:00:00&amp;quot; &amp;quot;2013-01-01 05:00:00&amp;quot; &amp;quot;2013-01-01 05:00:00&amp;quot; ...
&amp;gt; flights %&amp;gt;% filter(dep_delay &amp;lt; 120 &amp;amp; arr_delay &amp;lt; 120) %&amp;gt;% select(arr_delay, dep_delay, everything())
# A tibble: 315,868 x 19
   arr_delay dep_delay  year month   day dep_time sched_dep_time arr_time sched_arr_time carrier flight tailnum origin dest  air_time distance  hour minute
       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
 1     11.0       2.00  2013     1     1      517            515      830            819 UA        1545 N14228  EWR    IAH      227       1400  5.00   15.0
 2     20.0       4.00  2013     1     1      533            529      850            830 UA        1714 N24211  LGA    IAH      227       1416  5.00   29.0
 3     33.0       2.00  2013     1     1      542            540      923            850 AA        1141 N619AA  JFK    MIA      160       1089  5.00   40.0
 4    -18.0      -1.00  2013     1     1      544            545     1004           1022 B6         725 N804JB  JFK    BQN      183       1576  5.00   45.0
 5    -25.0      -6.00  2013     1     1      554            600      812            837 DL         461 N668DN  LGA    ATL      116        762  6.00    0  
 6     12.0      -4.00  2013     1     1      554            558      740            728 UA        1696 N39463  EWR    ORD      150        719  5.00   58.0
 7     19.0      -5.00  2013     1     1      555            600      913            854 B6         507 N516JB  EWR    FLL      158       1065  6.00    0  
 8    -14.0      -3.00  2013     1     1      557            600      709            723 EV        5708 N829AS  LGA    IAD       53.0      229  6.00    0  
 9    - 8.00     -3.00  2013     1     1      557            600      838            846 B6          79 N593JB  JFK    MCO      140        944  6.00    0  
10      8.00     -2.00  2013     1     1      558            600      753            745 AA         301 N3ALAA  LGA    ORD      138        733  6.00    0  
# ... with 315,858 more rows, and 1 more variable: time_hour &amp;lt;dttm&amp;gt;
&amp;gt; # show the makeup time
&amp;gt; flights %&amp;gt;% mutate(makeuptime = dep_delay - arr_delay) %&amp;gt;% select(makeuptime, everything())
# A tibble: 336,776 x 20
   makeuptime  year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay carrier flight tailnum origin dest  air_time distance  hour
        &amp;lt;dbl&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
 1     - 9.00  2013     1     1      517            515      2.00      830            819     11.0  UA        1545 N14228  EWR    IAH      227       1400  5.00
 2     -16.0   2013     1     1      533            529      4.00      850            830     20.0  UA        1714 N24211  LGA    IAH      227       1416  5.00
 3     -31.0   2013     1     1      542            540      2.00      923            850     33.0  AA        1141 N619AA  JFK    MIA      160       1089  5.00
 4      17.0   2013     1     1      544            545     -1.00     1004           1022    -18.0  B6         725 N804JB  JFK    BQN      183       1576  5.00
 5      19.0   2013     1     1      554            600     -6.00      812            837    -25.0  DL         461 N668DN  LGA    ATL      116        762  6.00
 6     -16.0   2013     1     1      554            558     -4.00      740            728     12.0  UA        1696 N39463  EWR    ORD      150        719  5.00
 7     -24.0   2013     1     1      555            600     -5.00      913            854     19.0  B6         507 N516JB  EWR    FLL      158       1065  6.00
 8      11.0   2013     1     1      557            600     -3.00      709            723    -14.0  EV        5708 N829AS  LGA    IAD       53.0      229  6.00
 9       5.00  2013     1     1      557            600     -3.00      838            846    - 8.00 B6          79 N593JB  JFK    MCO      140        944  6.00
10     -10.0   2013     1     1      558            600     -2.00      753            745      8.00 AA         301 N3ALAA  LGA    ORD      138        733  6.00
# ... with 336,766 more rows, and 2 more variables: minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;
&amp;gt; 
&amp;gt; head(iris)
  Sepal.Length Sepal.Width Petal.Length Petal.Width Species
1          5.1         3.5          1.4         0.2  setosa
2          4.9         3.0          1.4         0.2  setosa
3          4.7         3.2          1.3         0.2  setosa
4          4.6         3.1          1.5         0.2  setosa
5          5.0         3.6          1.4         0.2  setosa
6          5.4         3.9          1.7         0.4  setosa
&amp;gt; # for every species list the average sepal length
&amp;gt; iris %&amp;gt;% group_by(Species) %&amp;gt;% summarise(meanSepl = mean(Sepal.Length))
# A tibble: 3 x 2
  Species    meanSepl
  &amp;lt;fct&amp;gt;         &amp;lt;dbl&amp;gt;
1 setosa         5.01
2 versicolor     5.94
3 virginica      6.59
&amp;gt; head(mtcars)
                   mpg cyl disp  hp drat    wt  qsec vs am gear carb
Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4
Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4
Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1
Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1
Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2
Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1
&amp;gt; # list mean of mpg for every combination of gear and cylinder
&amp;gt; mtcars %&amp;gt;% group_by(gear, cyl) %&amp;gt;% summarise(mean1 = mean(mpg))
# A tibble: 8 x 3
# Groups:   gear [?]
   gear   cyl mean1
  &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;
1  3.00  4.00  21.5
2  3.00  6.00  19.8
3  3.00  8.00  15.0
4  4.00  4.00  26.9
5  4.00  6.00  19.8
6  5.00  4.00  28.2
7  5.00  6.00  19.7
8  5.00  8.00  15.4
&amp;gt; # add a new column that lists mpg + displacement
&amp;gt; mtcars %&amp;gt;% group_by(gear, cyl) %&amp;gt;% mutate(newcol = mpg + disp)
# A tibble: 32 x 12
# Groups:   gear, cyl [8]
     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb newcol
   &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
 1  21.0  6.00   160 110    3.90  2.62  16.5  0     1.00  4.00  4.00    181
 2  21.0  6.00   160 110    3.90  2.88  17.0  0     1.00  4.00  4.00    181
 3  22.8  4.00   108  93.0  3.85  2.32  18.6  1.00  1.00  4.00  1.00    131
 4  21.4  6.00   258 110    3.08  3.22  19.4  1.00  0     3.00  1.00    279
 5  18.7  8.00   360 175    3.15  3.44  17.0  0     0     3.00  2.00    379
 6  18.1  6.00   225 105    2.76  3.46  20.2  1.00  0     3.00  1.00    243
 7  14.3  8.00   360 245    3.21  3.57  15.8  0     0     3.00  4.00    374
 8  24.4  4.00   147  62.0  3.69  3.19  20.0  1.00  0     4.00  2.00    171
 9  22.8  4.00   141  95.0  3.92  3.15  22.9  1.00  0     4.00  2.00    164
10  19.2  6.00   168 123    3.92  3.44  18.3  1.00  0     4.00  4.00    187
# ... with 22 more rows
&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Two Eggs Problem</title><description>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;
&lt;p&gt;A building has 100 floors. One of the floors is the highest floor an egg can be dropped from without breaking.&lt;/p&gt;
&lt;p&gt;If an egg is dropped from above that floor, it will break. If it is dropped from that floor or below, it will be completely undamaged and you&lt;/p&gt;</description><link>http://blog.vijayvikrant.com/two_egg_problem/</link><guid isPermaLink="false">5bec34b10b000afff2677986</guid><category>coding</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Mon, 05 Feb 2018 18:02:15 GMT</pubDate><content:encoded>&lt;h3 id="problem"&gt;Problem&lt;/h3&gt;
&lt;p&gt;A building has 100 floors. One of the floors is the highest floor an egg can be dropped from without breaking.&lt;/p&gt;
&lt;p&gt;If an egg is dropped from above that floor, it will break. If it is dropped from that floor or below, it will be completely undamaged and you can drop the egg again.&lt;/p&gt;
&lt;p&gt;Given two eggs, find the highest floor an egg can be dropped from without breaking, with as few drops as possible.&lt;/p&gt;
&lt;h3 id="solution"&gt;Solution&lt;/h3&gt;
&lt;p&gt;Assuming we had only 1 egg, then we cannot take any chances and the only way would be to start with Floor 1 and move up floor-by-floor. If the egg breaks on fall from floor &lt;code&gt;n&lt;/code&gt;, then floor &lt;code&gt;n-1&lt;/code&gt; is our answer. so, worst case 100 drops.&lt;/p&gt;
&lt;p&gt;Assuming we had infinite number of eggs, then we could use the binary tree stategy and start with floor 50, then floor 25 and that way we will be able to come to the solution in very few drops.&lt;/p&gt;
&lt;p&gt;In a 2 egg scenario, we could start with floor 50 and if the egg breaks, then we have no option but to go one floor at a time. so 1+49 chances.&lt;/p&gt;
&lt;p&gt;However, we could do better&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start at floor-10 and drop the egg
&lt;ul&gt;
&lt;li&gt;if the egg does not break, go to floor-20&lt;/li&gt;
&lt;li&gt;if the egg breaks, go floor-by-floor from floor-1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Repeat this until we find the answer. Worst case being floor 99. 10 + 9=19 drops&lt;/p&gt;
&lt;p&gt;Could we do better?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n + (n-1) + (n-2) + (n-3) + .... + 1 &amp;gt;= 100
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;n(n+1)/2 &amp;gt;= 100
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;n ~ 14&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;14		1		13
27		2		12
39		3		11
50		4		10
60		5		9
69		6		8
77		7		7
84		8		6
90		9		5
95		10		4
99		11		3
100		12		0
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>setting custom alerts on any device using pushbullet</title><description>&lt;p&gt;&lt;a href="http://blog.vijayvikrant.com/setting-custom-alerts-on-any-device-using-pushbullet/www.pushbullet.com"&gt;pushbullet.com&lt;/a&gt; lets you send API based notification/alerts.&lt;/p&gt;
&lt;p&gt;Start with creating a Pushbullet account. Install the app on your phone. Go to the pushbullet website, head to &amp;quot;My Account&amp;quot; and then create an access token. Note this token.&lt;/p&gt;
&lt;p&gt;The below python code can then be used to&lt;/p&gt;</description><link>http://blog.vijayvikrant.com/setting-custom-alerts-on-any-device-using-pushbullet/</link><guid isPermaLink="false">5bec34b10b000afff2677985</guid><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 15 Aug 2017 13:51:05 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href="http://blog.vijayvikrant.com/setting-custom-alerts-on-any-device-using-pushbullet/www.pushbullet.com"&gt;pushbullet.com&lt;/a&gt; lets you send API based notification/alerts.&lt;/p&gt;
&lt;p&gt;Start with creating a Pushbullet account. Install the app on your phone. Go to the pushbullet website, head to &amp;quot;My Account&amp;quot; and then create an access token. Note this token.&lt;/p&gt;
&lt;p&gt;The below python code can then be used to send a notification to all your registered devices.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def send_message(title, msg):
    url = &amp;quot;https://api.pushbullet.com/v2/pushes&amp;quot;
    headers = {'Content-Type': 'application/json',
               &amp;quot;Access-Token&amp;quot;: access_token}
    data = json.dumps({
        &amp;quot;type&amp;quot;: &amp;quot;note&amp;quot;,
        &amp;quot;title&amp;quot;: title,
        &amp;quot;body&amp;quot;: msg
    })
    requests.post(url, data=data, headers=headers)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My use case was &lt;a href="https://github.com/vvb/stock_alerts/blob/master/portfolio_alerts.py"&gt;this&lt;/a&gt; python script that generates buy and sell alerts on my mobile phone based on pre-configred prices in a csv sheet.&lt;/p&gt;
&lt;p&gt;But there is no reason this cannot be used to get datacenter alerts. I plan to include this as a library method in Cisco Ucs SDKs soon.&lt;/p&gt;
&lt;p&gt;note: You might need to signout and sign back in one time after you install the app for the alerts to start showing up.&lt;/p&gt;
</content:encoded></item><item><title>Using http with pip</title><description>&lt;p&gt;Enforce using http with pip,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org &amp;lt;packageName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/using-http-with-pip/</link><guid isPermaLink="false">5bec34b10b000afff2677984</guid><category>ucspython</category><category>pip</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Mon, 17 Apr 2017 19:02:05 GMT</pubDate><content:encoded>&lt;p&gt;Enforce using http with pip,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python.org &amp;lt;packageName&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Reflection in go!</title><description>&lt;p&gt;Printing struct attributes and values using reflection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;reflect&amp;quot;
)

type User struct {
	FirstName string
	LastName  string
	Age       int
}

func (f *User) reflect() {
	v := reflect.ValueOf(f).Elem()

	for i := 0; i &amp;lt; v.NumField(); i++ {
		val := v.Field(i)
		t := v.Type().Field(&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/reflection-in-go/</link><guid isPermaLink="false">5bec34b10b000afff2677983</guid><category>golang</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Mon, 17 Apr 2017 18:54:19 GMT</pubDate><content:encoded>&lt;p&gt;Printing struct attributes and values using reflection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;fmt&amp;quot;
	&amp;quot;reflect&amp;quot;
)

type User struct {
	FirstName string
	LastName  string
	Age       int
}

func (f *User) reflect() {
	v := reflect.ValueOf(f).Elem()

	for i := 0; i &amp;lt; v.NumField(); i++ {
		val := v.Field(i)
		t := v.Type().Field(i)
		fmt.Printf(&amp;quot;%s %v \t&amp;quot;, t.Name, val.Interface())
	}
}

func main() {
	f := &amp;amp;User{
		FirstName: &amp;quot;John&amp;quot;,
		LastName:  &amp;quot;Doe&amp;quot;,
		Age:       13,
	}

	f.reflect()
}
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>ansible modules for Cisco UCS IMC server</title><description>&lt;h3 id="imcansible"&gt;imc-ansible&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;imc-ansible&lt;/code&gt; are a set of ansible modules for Cisco UCS standalone servers(IMC servers).&lt;/p&gt;
&lt;h4 id="installation"&gt;installation&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# Install ansible
sudo pip install ansible

# install imcsdk from github
git clone https://github.com/ciscoucs/imcsdk
cd imcsdk
sudo make install

# install imc-ansible from github
git clone https://github.com/ciscoucs/imc-ansible
cd&lt;/code&gt;&lt;/pre&gt;</description><link>http://blog.vijayvikrant.com/ansible-modules-for-cisco-ucs-imc-server/</link><guid isPermaLink="false">5bec34b10b000afff2677982</guid><category>ansible</category><category>imcsdk</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Mon, 06 Feb 2017 22:55:04 GMT</pubDate><content:encoded>&lt;h3 id="imcansible"&gt;imc-ansible&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;imc-ansible&lt;/code&gt; are a set of ansible modules for Cisco UCS standalone servers(IMC servers).&lt;/p&gt;
&lt;h4 id="installation"&gt;installation&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;# Install ansible
sudo pip install ansible

# install imcsdk from github
git clone https://github.com/ciscoucs/imcsdk
cd imcsdk
sudo make install

# install imc-ansible from github
git clone https://github.com/ciscoucs/imc-ansible
cd imc-ansible
sudo python install.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id="samplerun"&gt;sample run&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;➔ ansible-playbook -i inventory site.yml

PLAY [imc]
*********************************************************************

TASK [common : check if imcsdk is installed]
***********************************
ok: [fpmr1_192.168.1.1]

TASK [common : install imcsdk]
*************************************************
skipping: [fpmr1_192.168.1.1]

TASK [admin : set password policy]
*********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : create local user]
***********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : delete local user]
***********************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : reset password policy]
*******************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : enable ntp]
******************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : disable ntp]
*****************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : enable LDAP]
*****************************************************
changed: [fpmr1_192.168.1.1]

TASK [admin : disable LDAP]
****************************************************
changed: [fpmr1_192.168.1.1]

TASK [boot : set boot order]
***************************************************
changed: [fpmr1_192.168.1.1]

TASK [boot : set boot order alternate]
*****************************************
changed: [fpmr1_192.168.1.1]

TASK [storage : create virtual drive]
******************************************
changed: [fpmr1_192.168.1.1]

TASK [storage : delete virtual drive]
******************************************
changed: [fpmr1_192.168.1.1]

PLAY RECAP
*********************************************************************
fpmr1_192.168.1.1       : ok=13   changed=12   unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item><item><title>Inventory Ucs Managed servers via ucsmsdk</title><description>&lt;p&gt;ucsmsdk 0.9.3.0 will add support for inventory APIs.&lt;br&gt;
This allows for multi-host multi-component inventory in multiple formats(enough of multiple? :-D ).&lt;/p&gt;
&lt;p&gt;The inventory APIs support inventorying,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- fabric interconnects
- cpus
- disks
- dimms
- storage controller
- VIC
- vNICs
- vHBAs
- PSUs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The&lt;/p&gt;</description><link>http://blog.vijayvikrant.com/inventory-ucs-managed-servers-via-ucsmsdk/</link><guid isPermaLink="false">5bec34b10b000afff2677981</guid><category>ucspython</category><category>ucsmsdk</category><dc:creator>Vikrant Balyan</dc:creator><pubDate>Tue, 24 Jan 2017 06:04:13 GMT</pubDate><content:encoded>&lt;p&gt;ucsmsdk 0.9.3.0 will add support for inventory APIs.&lt;br&gt;
This allows for multi-host multi-component inventory in multiple formats(enough of multiple? :-D ).&lt;/p&gt;
&lt;p&gt;The inventory APIs support inventorying,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- fabric interconnects
- cpus
- disks
- dimms
- storage controller
- VIC
- vNICs
- vHBAs
- PSUs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The supported output formats for the report are,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- csv
- html
- json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we recommend using the html format, as it has inbuilt javascript based filtering. It can quickly help narrow down a certain component on a certain host.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from ucsmsdk.utils.inventory import get_inventory

# Gets inventory of all components in JSON format
get_inventory(handle=handle)

# Gets inventory for all servers all components in JSON format
get_inventory(handle=[handle1, handle2, handle3])

# Gets inventory of one server all components in JSON format
get_inventory(handle=handle, component=&amp;quot;all&amp;quot;)

# Gets disks inventory of one server in JSON format
get_inventory(handle=handle, component=&amp;quot;disks&amp;quot;)

# Gets cpu and disks inventory for one server in JSON format
get_inventory(handle=handle, component=[&amp;quot;cpu&amp;quot;, &amp;quot;disks&amp;quot;])

# Gets cpu and disks inventory for one server in JSON format and writes to inventory.json file
get_inventory(handle=handle, component=[&amp;quot;cpu&amp;quot;, &amp;quot;disks&amp;quot;], file_format=&amp;quot;json&amp;quot;, file_name=&amp;quot;inventory.json&amp;quot;)

# Gets cpu and disks inventory for one server in CSV format and writes to inventory.csv fie
get_inventory(handle=handle, component=[&amp;quot;cpu&amp;quot;, &amp;quot;disks&amp;quot;], file_format=&amp;quot;csv&amp;quot;, file_name=&amp;quot;inventory.csv&amp;quot;)

# Gets cpu and disks inventory for one server in HTML format and writes to inventory.html
get_inventory(handle=handle, component=[&amp;quot;cpu&amp;quot;, &amp;quot;disks&amp;quot;], file_format=&amp;quot;html&amp;quot;, file_name=&amp;quot;inventory.html&amp;quot;)  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can be tried out today via the code available at &lt;a href="https://github.com/ciscoucs/ucsmsdk"&gt;https://github.com/ciscoucs/ucsmsdk&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;complete code to run it,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#! /usr/bin/env python

from ucsmsdk.ucshandle import UcsHandle
from ucsmsdk.utils.inventory import get_inventory

handle = UcsHandle(&amp;quot;192.168.1.1&amp;quot;, &amp;quot;username&amp;quot;, &amp;quot;password&amp;quot;)
handle.login()

# This would create inventory.html in the same directory where the script is run from
get_inventory(handle=handle, component=&amp;quot;all&amp;quot;, file_format=&amp;quot;html&amp;quot;, file_name=&amp;quot;inventory.html&amp;quot;)

handle.logout()
&lt;/code&gt;&lt;/pre&gt;
</content:encoded></item></channel></rss>